@using System.Globalization
@inject IJSRuntime JS
@inject NavigationManager Navigation

<link id="theme-link" href="_content/Telerik.UI.for.Blazor.Trial/css/kendo-theme-default/all.css" rel="stylesheet" />

<!-- Swatch Selector -->
<div>
    <label style="color:blue">
        Select Theme:
    </label>
    <div>
        <TelerikComboBox Data="@Swatches"
                         ValueField="Value"
                         TextField="Text"
                         Placeholder="Select a theme..."
                         ValueChanged="@(async (string value) => await ChangeSwatchAsync(value))" />
    </div>
</div>

<!-- Locale Selector -->
<div>
    <label style="color:red">
        Select your locale:
    </label>
    <div>
        <TelerikComboBox Data="@CultureOptions"
                         ValueField="Code"
                         TextField="DisplayText"
                         Placeholder="Select a locale..."
                         ValueChanged="@(async (string code) => await ApplySelectedCultureAsync(code))" />
    </div>
</div>

@code {
    // List of available Swatches
    private List<SwatchOption> Swatches = new()
    {
        new SwatchOption { Value = "kendo-theme-default/all", Text = "Default" },
        new SwatchOption { Value = "kendo-theme-default/default-ocean-blue", Text = "Default Ocean Blue" },
        new SwatchOption { Value = "kendo-theme-material/all", Text = "Material" },
        new SwatchOption { Value = "kendo-theme-fluent/all", Text = "Fluent" },
        new SwatchOption { Value = "green", Text = "Green" },
    };

    private class SwatchOption
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }

    // List of Supported Cultures
    private List<CultureOption> CultureOptions => SupportedCultures
        .Select(c => new CultureOption { Code = c.Name, DisplayText = c.DisplayName })
        .ToList();

    private CultureInfo[] SupportedCultures = new[]
    {
        new CultureInfo("en-US"),
        new CultureInfo("bg-BG"),
        new CultureInfo("fr-FR"),
        new CultureInfo("it-IT"),
        new CultureInfo("es-ES"),
    };

    private CultureInfo? SelectedCulture;

    protected override void OnInitialized()
    {
        SelectedCulture = CultureInfo.CurrentCulture;
    }

    private async Task ApplySelectedCultureAsync(string selectedCode)
    {
        var selectedCulture = SupportedCultures.FirstOrDefault(c => c.Name == selectedCode);

        if (selectedCulture != null && CultureInfo.CurrentCulture != selectedCulture)
        {
            SelectedCulture = selectedCulture;
            await JS.InvokeVoidAsync("blazorCulture.set", SelectedCulture.Name);
            Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        }
    }

    private async Task ChangeSwatchAsync(string selectedValue)
    {
        var themeLink = await JS.InvokeAsync<IJSObjectReference>("getThemeLink");
        if (themeLink != null)
        {
            await themeLink.InvokeVoidAsync("setAttribute", "href", $"_content/Telerik.UI.for.Blazor.Trial/css/{selectedValue}.css");
        }
    }

    private class CultureOption
    {
        public string Code { get; set; }
        public string DisplayText { get; set; }
    }
}